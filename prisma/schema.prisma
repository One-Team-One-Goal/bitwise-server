generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Lesson {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topics    Topic[]
}

model Topic {
  id             Int         @id @default(autoincrement())
  title          String
  lessonId       Int
  tags           String[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  contentText    String
  displayContent Json?
  lesson         Lesson      @relation(fields: [lessonId], references: [id])
  UserSkill      UserSkill[]
}

model UserSkill {
  id        Int      @id @default(autoincrement())
  userId    String
  topicId   Int      // link skill to a specific topic/lesson
  level     Float    @default(0.5) // Knowledge level (0.0 to 1.0)
  mastery   Float    @default(0.5) // Skill proficiency (0.0 to 1.0) 
  attempts  Int      @default(0)   // Number of attempts on this topic
  correct   Int      @default(0)   // Number of correct answers
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  topic     Topic    @relation(fields: [topicId], references: [id])
  @@unique([userId, topicId])
}


model Attempt {
  id          Int      @id @default(autoincrement())
  userId      String
  responses   Json?
  score       Int?
  feedback    String?
  createdAt   DateTime @default(now())
  questions   Json
  updatedAt   DateTime @updatedAt
  performance Json?
}

model UserSkill {
  id        Int      @id @default(autoincrement())
  userId    String
  topicId   Int
  level     Float    @default(0.5)
  mastery   Float    @default(0.5)
  attempts  Int      @default(0)
  correct   Int      @default(0)
  updatedAt DateTime
  createdAt DateTime @default(now())
  Topic     Topic    @relation(fields: [topicId], references: [id])

  @@unique([userId, topicId])
}
